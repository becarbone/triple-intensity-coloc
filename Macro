//the base of this macro's raw dendrite analysis work was from Lai Ding's 
//dendrite analysis macro made for the Biederer lab in 2015
//the triple colocalization and area overlap is from Bea Carbone in 2018/19
//https://github.com/becarbone/triple-intensity-coloc/

// ImageJ initialize
run("Colors...", "foreground=white background=black selection=magenta");
run("Options...", "iterations=1 count=1 black edm=Overwrite");
run("Set Measurements...", "area mean perimeter integrated area_fraction limit redirect=None decimal=5");

//set raw result folder. rawdir contains multiple subfolders, each subfolder contains multiple raw images
//each image is RGB format
//result and dendrites folders should be empty.
rawdir=getDirectory("Choose Raw Data Folder");
resultdir=getDirectory("Choose Result Folder");

//variable setup
var greenThreshold, redThreshold, blueThreshold, areapercent, scale, minsize, maxsize, name, precount, postcount, POIcount, prepostcount, postprecount;
var resultlist, FolderCreate, foldername, postprecount, prepostcount, totalpostprecount, totalprepostcount;
var UMcountpostprepostpost, UMcountprepostprepre, str, prepostRatio, postpostRatio, ratioTemp, prepostArray, prepreArray, postpreArray, postpostArray, colors;
var pre, post, POI, UMcountprePOIpostPOIPOIPOI, prePOIcount, postPOIcount, marker, second, third, mscount, xpre, xpost, xPOI, countArray;
var folderlist, rawdir, filelist, resultpath, totalprePOIcount, totalpostPOIcount, tripleColocStr;

//three thresholds - specify which channel is for "pre-", post-, and protein of interest (POI)
//restrict the ROI of the "presynaptic" marker to the puncta associated with postsynaptic puncta
//get the intensity of the presynaptic marker within the protein of interest ROI
//and compare it to the overall intensity of the protein of interest within its own ROI?
//so, if you have G/R/B, with G=pre, R=post, B=POI, R associated G puncta used to assess the intensity of B signal
//within the G ROI and the intensity of the B signal within the B ROI.

// input parameter

colors = newArray("Green", "Red", "Blue");
greenThreshold = 30;
redThreshold = 30;
blueThreshold = 30;

parameterinput();

print("Raw_Folder:	"+rawdir);
print("Result_Folder:	"+resultdir);
//mod this portion to display the ratio of counted to total GR/RG puncta
print(" 	"+pre+"Puncta#	"+post+"Puncta#	"+POI+"Puncta#		"+pre+post+"#	"+post+pre+"#	"+pre+POI+"#	"+post+POI+"#	"+POI+pre+"#	"+POI+post+"#		"+pre+post+"_totalCounted	"+post+pre+"_totalCounted	"+pre+POI+"_totalCounted	"+post+POI+"_totalCounted	"+POI+pre+"_totalCounted	"+POI+post+"_totalCounted		"+pre+post+"_counted/total	"+post+pre+"_counted/total	"+pre+POI+"_counted/total	"+post+POI+"_counted/total	"+POI+pre+"_counted/total	"+POI+post+"_counted/total");
// add 
folderlist=getFileList(rawdir);

//setup for the intensity analysis, overlay of ROI from mask on unmasked channel image
//prepost = pre ROI/post image
//prepre = pre ROI/pre image
//postpreArray = post ROI/pre
//postpost = post ROI/post image
//prePOI = pre ROI/POI image
//postPOI = post ROI/POI image
//POIpre = POI ROI/pre image
//POIpost = POI ROI/post image
//POIPOI = POI ROI/POI image
//prepostPOI = pre associated post ROI/POI image
//postprePOI = post associated pre ROI/POI image

//these arrays are for two channel associations
prepostArray = newArray("");
prepreArray = newArray("");
postpreArray = newArray(""); 
postpostArray = newArray("");
prePOIArray = newArray("");
postPOIArray = newArray("");
POIPOIArray = newArray("");

totalprepostPOIArea = newArray();
totalpostprePOIArea = newArray();
totalPOIpostpreArea = newArray();
totalpostPOIpreArea = newArray();
totalPOIprepostArea = newArray();
totalprePOIpostArea = newArray();
prepostPOIArea = newArray();
postprePOIArea = newArray();
POIpostpreArea = newArray();
postPOIpreArea = newArray();
POIprepostArea = newArray();
prePOIpostArea = newArray();

//these arrays are for two channel associations dependent on a third
prepostPOIArray = newArray("");
postprePOIArray = newArray("");

//prepostRatio = newArray("");
//postpostRatio = newArray("");

UMcountprepostprepre = "the "+pre+"ROI are used to assess intensity of the "+post+" image within the ROI, or over the raw image that the mask was made from\nassociation is at least 25% of the ROI filled with puncta from the mask\n";
UMcountpostprepostpost = "the "+pre+"ROI are used to assess intensity of the "+post+" image within the ROI, or over the raw image that the mask was made from\nassociation is at least 25% of the ROI filled with puncta from the mask";
UMcountprePOIpostPOIPOIPOI = "the "+pre+" and "+post+" ROI are used to assess intensity of the "+POI+" image within the ROI, or over the raw image that the mask was made from\nassociation is at least 25% of the ROI filled with puncta from the mask\n";
UMcounttriple = "the "+pre+" ROI associated with puncta from the "+post+" mask are used to assess intensity of the "+POI+" image within the ROI, or "+post+" ROI associated with "+pre+" mask puncta\nassociation is at least 25% of the ROI filled with puncta from the mask\n";
tripleColocStr = "the first color listed is the ROI file used, the second color is the mask used to determine ROI that associate with it, and the third is the mask that the first and second color associated ROI are used to measure colocalization\nassociation is at least 25% of the ROI filled with puncta from the mask\n";

UMcountprepostprepre = UMcountprepostprepre+" Filename	#	AreaOf"+pre+"ROI		PrePost_intensity(/pix)	PrePostint_intensity(/um^2)	PrePost_intensity(sum_pix)		PrePre_intensity(/pix)	PrePre_intensity(/um^2)	PrePreraw_intensity(sum_pix)\n";
UMcountpostprepostpost = UMcountpostprepostpost+"Filename	#	AreaOf"+post+"ROI		PostPre_intensity(/pix)	PostPreint_intensity(/um^2)	PostPre_intensity(sum_pix)		PostPost_intensity(/pix)	PostPostint_density(um)	PostPost_intensity(sum_pix)\n";
UMcountprePOIpostPOIPOIPOI =UMcountprePOIpostPOIPOIPOI+ "Filename	#	AreaOf"+pre+"ROI		PrePOI_intensity(/pix)	PrePOIint_intensity(/um^2)	PrePOI_intensity(sum_pix)		AreaOf"+post+"ROI	PostPOI_intensity(/pix)	PostPOI_intensity(/um^2)	PostPOI_intensity(sum_pix)		AreaOf"+POI+"ROI	POIPOI_intensity(/pix)	POIPOI_intensity(/um^2)	POIPOI_intensity(sum_pix)\n";
UMcounttriple = UMcounttriple+"Filename	#	AreaOf"+pre+post+"assocROI		PrePostPOIPOI_intensity(/pix)	PrePostPOIPOI_intensity(/um^2)	PrePostPOI_intensity(sum_pix)		#	AreaOf"+post+pre+"assocROI	PostPrePOI_intensity(/pix)	PostPrePOI_intensity(/um^2)	PostPrePOI_intensity(sum_pix)\n";
tripleColocStr = tripleColocStr+"Filename	"+pre+post+POI+"count	total"+pre+post+POI+"count		"+post+pre+POI+"count	total"+post+pre+POI+"count		"+POI+post+pre+"count	total"+POI+post+pre+"count		"+post+POI+pre+"count	total"+post+POI+pre+"count		"+POI+pre+post+"count	total"+POI+pre+post+"count		"+pre+POI+post+"count	total"+pre+POI+post+"count\n";

for(f=0;f<folderlist.length;f++) {
	Dialog.create("Thresholds "+folderlist[f]);
		Dialog.addNumber("Green Threshold:", greenThreshold);
		Dialog.addNumber("Red Threshold:", redThreshold);
		Dialog.addNumber("Blue Threshold", blueThreshold);
	Dialog.show();
	greenThreshold=Dialog.getNumber();
	redThreshold=Dialog.getNumber();
	blueThreshold=Dialog.getNumber();
	print("GreenThreshold	RedThreshold	BlueThreshold	AreaPercent(%)	PixelScale(um/pixel)	Min_Puncta_Size	Max_Puncta_Size");
	print(greenThreshold+"	"+redThreshold+"	"+blueThreshold+"	"+areapercent+"	"+scale+"	"+minsize+"	"+maxsize);

	foldername = File.getName(rawdir+folderlist[f]);
	if(File.exists(resultdir+foldername)!=1) {
		File.makeDirectory(resultdir+foldername);
	}
	rawlist=getFileList(rawdir+foldername);
	filelist=getFileList(rawdir+folderlist[f]);
	resultpath = getFileList(rawdir+folderlist[f]);
	print(folderlist[f]);

	prepostArray = Array.concat(prepostArray,folderlist[f]+"\n");
	prepreArray = Array.concat(prepreArray,"");
	postpreArray = Array.concat(postpreArray,folderlist[f]+"\n");
	postpostArray = Array.concat(postpostArray,"");
	prePOIArray = Array.concat(prePOIArray,folderlist[f]+"						");
	postPOIArray = Array.concat(postPOIArray,"		"+folderlist[f]+"			");
	POIPOIArray = Array.concat(POIPOIArray,"		"+folderlist[f]+"\n");

	prepostPOIArea = Array.concat(prepostPOIArea,"		"+folderlist[f]+"			");
	postprePOIArea = Array.concat(postprePOIArea,"		"+folderlist[f]+"\n");
	POIpostpreArea = Array.concat(POIpostpreArea,folderlist[f]+"\n");
	postPOIpreArea = Array.concat(postPOIpreArea,folderlist[f]+"\n");
	POIprepostArea = Array.concat(POIprepostArea,folderlist[f]+"\n");
	prePOIpostArea = Array.concat(prePOIpostArea,folderlist[f]+"\n");

	prepostPOIArray = Array.concat(prepostPOIArray,folderlist[f]+"\n");
	postprePOIArray = Array.concat(postprePOIArray,folderlist[f]+"\n");
	tripleColocStr = tripleColocStr+folderlist[f]+"\n";

	for(d=0;d<filelist.length;d++) {
		//initialize :  open file, split channel, name by "red"/"green"/"blue"/"axon"

		open(rawdir+folderlist[f]+rawlist[d]);

		selectImage(nImages);
		name=getTitle();
		run("Properties...", "channels=1 slices=1 frames=1 unit=um pixel_width="+scale+" pixel_height="+scale+" voxel_depth=1");
		run("Split Channels");
	
		selectImage(name+" (blue)"); 
		rename("Blue");
		run("Duplicate...", " ");
		selectImage("Blue-1"); 
		rename("Blue-unmask");
	
		selectImage(name+" (green)"); 
		rename("Green");
		run("Duplicate...", " ");
		selectImage("Green-1"); 
		rename("Green-unmask");
	
		selectImage(name+" (red)"); 
		rename("Red");
		run("Duplicate...", " ");
		selectImage("Red-1"); 
		rename("Red-unmask");
	
		//create green, red, blue mask images and roi files
		//presynaptic mask
		channel = pre;
		selectImage(channel);
		run("Gaussian Blur...", "sigma=1");
		if( channel == "Green") {
			setThreshold(greenThreshold, 255);
			}
		if( channel == "Red") {
			setThreshold(redThreshold, 255);
			}
		if( channel == "Blue") {
			setThreshold(blueThreshold, 255);
			}
		run("Find Maxima...", "noise=10 output=[Segmented Particles] above");
		run("Analyze Particles...", "size="+minsize+"-"+maxsize+" pixel show=Masks add");
		selectWindow("Mask of "+channel+" Segmented");  
		run("Grays");
		saveAs("Tiff", resultdir+folderlist[f]+name+"_"+channel+"_mask.tif");
		run("Clear Results");
		roiManager("Measure");
		selectWindow("Results");
	
		run("Clear Results");
		rename(channel+" mask");
		selectImage(channel); 
		close();
		selectImage(channel+" Segmented"); 
		close();
	
		//gets the # of puncta counted in each condition
		precount = roiManager("Count");

		if( roiManager("Count") > 0 )	{
			roiManager("Save",resultdir+folderlist[f]+name+"_"+channel+"_ROI.zip");
		}
		roiManager("reset");

		//postsynaptic mask
		channel = post;
		selectImage(channel);
		run("Gaussian Blur...", "sigma=1");
		if( channel == "Green") {
			setThreshold(greenThreshold, 255);
			}
		if( channel == "Red") {
			setThreshold(redThreshold, 255);
			}
		if( channel == "Blue") {
			setThreshold(blueThreshold, 255);
			}
		run("Find Maxima...", "noise=10 output=[Segmented Particles] above");
		run("Analyze Particles...", "size="+minsize+"-"+maxsize+" pixel show=Masks add");
		selectWindow("Mask of "+channel+" Segmented");  
		run("Grays");
		saveAs("Tiff", resultdir+folderlist[f]+name+"_"+channel+"_mask.tif");
		run("Clear Results");
		roiManager("Measure");
		selectWindow("Results");
	
		run("Clear Results");
		rename(channel+" mask");
		selectImage(channel); 
		close();
		selectImage(channel+" Segmented"); 
		close();
	
		//gets the # of puncta counted in each condition
		postcount = roiManager("Count");
	  
		if( roiManager("Count") > 0 )	{
			roiManager("Save",resultdir+folderlist[f]+name+"_"+channel+"_ROI.zip");
		}
		roiManager("reset");

		//protein of interest (POI) mask
		channel = POI;
		selectImage(channel);
		run("Gaussian Blur...", "sigma=1");
		if( channel == "Green") {
			setThreshold(greenThreshold, 255);
			}
		if( channel == "Red") {
			setThreshold(redThreshold, 255);
			}
		if( channel == "Blue") {
			setThreshold(blueThreshold, 255);
			}
		run("Find Maxima...", "noise=10 output=[Segmented Particles] above");
		run("Analyze Particles...", "size="+minsize+"-"+maxsize+" pixel show=Masks add");
		selectWindow("Mask of "+channel+" Segmented");  
		run("Grays");
		saveAs("Tiff", resultdir+folderlist[f]+name+"_"+channel+"_mask.tif");
		run("Clear Results");
		roiManager("Measure");
		selectWindow("Results");
	
		run("Clear Results");
		rename(channel+" mask");
		selectImage(channel); 
		close();
		selectImage(channel+" Segmented"); 
		close();

		//gets the # of puncta counted in each condition
		
		POIcount = roiManager("Count");

		if( roiManager("Count") > 0 )	{
			roiManager("Save",resultdir+folderlist[f]+name+"_"+channel+"_ROI.zip");
		}
		roiManager("reset");

		//this function opens the saved ROI files for the green, red, blue channels of each image and overlays them
		//either using the green mask as the base image and checking for overlap of the red puncta, etc...
		//because the puncta sizes differ, this can be pretty variable between G, R, B

		//two mask overlap
		//total = overlap at all
		totalprepostcount = 0;
		totalpostprecount = 0;
		totalprePOIcount = 0;
		totalpostPOIcount = 0;
		totalPOIprecount = 0;
		totalPOIpostcount = 0;

		//not total = overlap at least 25% of the ROI with the mask
		prepostcount = 0;
		postprecount = 0;
		prePOIcount = 0;
		postPOIcount = 0;
		POIprecount = 0;
		POIpostcount = 0;

		//measure
		
		//the function below was moved to be actual code because arrays don't populate within a fx in javascript/imagej language
		//in imagej because it's dumb.
		
		//prepost, prepre, prePOI

		roiManager("reset");
	  	if(File.exists(resultdir+folderlist[f]+name+"_"+pre+"_ROI.zip") ==1)	{
	  	  	roiManager("Open", resultdir+folderlist[f]+name+"_"+pre+"_ROI.zip");
	  		selectImage(post+" mask");
	  		run("Clear Results");
	  		roiManager("Measure");
	  		counted=0;
	  		x = 0;
	  		for(i=0;i<roiManager("Count");i++) {
	  			totalprepostcount = totalprepostcount + getResult("%Area",i);
	  			if(getResult("%Area",i) >= areapercent) {
	  				counted++;
	  			}
	  			x++;	
	  		}
	  		totalprepostcount = x;
	  		prepostcount = counted;
	  		selectImage(pre+" mask");
	  		run("Clear Results");
	  		roiManager("Measure");
	  		counted=0;
	  		x = 0;
	  		for(i=0;i<roiManager("Count");i++) {
	  			if(getResult("%Area",i) >= areapercent) {
	  				counted++;
	  			}
	  			x++;	
	  		}
	  		totalpreprecount = x;
	  		preprecount = counted;

	  		selectImage(POI+" mask");
	  		run("Clear Results");
	  		roiManager("Measure");
	  		counted=0;
	  		x = 0;
	  		for(i=0;i<roiManager("Count");i++) {
	  			if(getResult("%Area",i) >= areapercent) {
	  				counted++;
	  			}
	  			x++;	
	  		}
	  		totalprePOIcount = x;
	  		prePOIcount = counted;

	  		selectImage(post+"-unmask");
	  		run("Clear Results");
	  		roiManager("Measure");
	  		for(i=0;i<roiManager("Count");i++) {
	  			if(getResult("Area",i)>0){
	  				if(getResult("%Area",i)>0)	{
		 	  			//this str just stores the values from the ROI measure function to be put into the appropriate array for the green ROI
	 		  			str = filelist[d]+"	"+i+1+"	"+getResult("Area",i)+"		"+getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i);
	 	  				prepostArray = Array.concat(prepostArray,str);
	 	 			}
	 	 		}
	  		}
	  		selectImage(pre+"-unmask");
	  		run("Clear Results");
	  		roiManager("Measure");
	  		for(i=0;i<roiManager("Count");i++) {
	  			if(getResult("Area",i)>0){
	  				if(getResult("%Area",i)>0)	{
		  				str = "		"+getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i)+"\n";
		  				prepreArray = Array.concat(prepreArray,str);
	  				}
	  			}
	  		}
	  		selectImage(POI+"-unmask");
	  		run("Clear Results");
	  		roiManager("Measure");
	  		for(i=0;i<roiManager("Count");i++) {
	  			if(getResult("Area",i)>0){
	  				if(getResult("%Area",i)>0)	{
		  				str = filelist[d]+"	"+i+1+"	"+getResult("Area",i)+"		"+getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i);
		  				prePOIArray = Array.concat(prePOIArray,str);
	  				}
	  			}
	  		}
	  	}
		else{
			totalprepostcount = 0;
			prepostcount = 0;
			totalpreprecount = 0;
			preprecount = 0;
			totalprePOIcount = 0;
			prePOIcount = 0;
		}

		//postpre, postpost, postPOI

		roiManager("reset"); 
		run("Clear Results");
		//prints this + variable strings produced from the other functions to the log to be saved
		if(File.exists(resultdir+folderlist[f]+name+"_"+post+"_ROI.zip") ==1)	{
		  	roiManager("Open", resultdir+folderlist[f]+name+"_"+post+"_ROI.zip");
			selectImage(pre+" mask");
			run("Clear Results");
			roiManager("Measure");
			counted=0;
			x = 0;
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("%Area",i) >= areapercent) {
					counted++;
				}
				x++;	
			}
			totalpostprecount = x;
			postprecount = counted;
	
			selectImage(post+" mask");
			run("Clear Results");
			roiManager("Measure");
			counted=0;
			x = 0;
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("%Area",i) >= areapercent) {
					counted++;
				}
				x++;	
			}
			totalpostpostcount = x;
			postpostcount = counted;
	
			selectImage(POI+" mask");
			run("Clear Results");
			roiManager("Measure");
			counted=0;
			x = 0;
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("%Area",i) >= areapercent) {
					counted++;
				}
				x++;
			}
			totalpostPOIcount = x;
			postPOIcount = counted;
	
			selectImage(pre+"-unmask");
			run("Clear Results");
			roiManager("Measure");
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("Area",i)>0)	{
					if(getResult("%Area",i)>0)	{
						//this str just stores the values from the ROI measure function to be put into the appropriate array for the green ROI
						str = filelist[d]+"	"+i+1+"	"+getResult("Area",i)+"		"+getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i);
						postpreArray = Array.concat(postpreArray,str);
					}
				}
			}
	
			selectImage(post+"-unmask");
			run("Clear Results");
			roiManager("Measure");
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("Area",i)>0)	{
					if(getResult("%Area",i)>0)	{
						str = "		"+getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i)+"\n";
						postpostArray = Array.concat(postpostArray,str);
					}
				}
			}
	
			selectImage(POI+"-unmask");
			run("Clear Results");
			roiManager("Measure");
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("Area",i)>0)	{
					if(getResult("%Area",i)>0)	{
						str = "		"+getResult("Area",i)+"	"+getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i);
						postPOIArray = Array.concat(postPOIArray,str);
					}
				}
			}
		}
		else{
			totalpostprecount = 0;
			postprecount = 0;
			totalpostpostcount = 0;
			postpostcount = 0;
			totalpostPOIcount = 0;
			postPOIcount = 0;

		}
		//POIPOI prepostPOI postprePOI
		//prints this + variable strings produced from the other functions to the log to be saved

		roiManager("reset");
	  	if(File.exists(resultdir+folderlist[f]+name+"_"+POI+"_ROI.zip") ==1)	{
	  		roiManager("Open", resultdir+folderlist[f]+name+"_"+POI+"_ROI.zip");
  			
	  		selectImage(pre+" mask");
			run("Clear Results");
			roiManager("Measure");
			counted=0;
			x = 0;
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("%Area",i) >= areapercent) {
					counted++;
				}
				x++;	
			}
			totalPOIprecount = x;
			POIprecount = counted;
	
			selectImage(post+" mask");
			run("Clear Results");
			roiManager("Measure");
			counted=0;
			x = 0;
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("%Area",i) >= areapercent) {
					counted++;
				}
				x++;	
			}
			totalPOIpostcount = x;
			POIpostcount = counted;

  			selectImage(POI+" mask");
	  		run("Clear Results");
	  		roiManager("Measure");
	  		counted=0;
	  		x = 0;
	  		for(i=0;i<roiManager("Count");i++) {
	  			if(getResult("%Area",i) >= areapercent) {
	  				counted++;
	  			}
	  			x++;	
	  		}
	  		totalPOIPOIcount = x;
	  		POIPOIcount = counted;
	  	
  			selectImage(POI+"-unmask");
	  		run("Clear Results");
	  		roiManager("Measure");
	  		for(i=0;i<roiManager("Count");i++) {
	  			if(getResult("Area",i)>0)	{
	  				if(getResult("%Area",i)>0)	{
	  					str = "		"+getResult("Area",i)+"	"+getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i)+"\n";
	  					POIPOIArray = Array.concat(POIPOIArray,str);
	  				}
	  			}
	  		}
	  	}
	  	else{
			totalPOIPOIcount = 0;
			POIPOIcount = 0;
		}

		//this is measuring the number of pre ROI that associate with 
		//post ROI and overlaying that over the POI raw image
		//to get the intensity of the POI signal associated with 
		//these two other signals

		roiManager("reset");
		countArray = newArray();
		if(File.exists(resultdir+folderlist[f]+name+"_"+pre+"_ROI.zip") ==1)	{
	  		roiManager("Open", resultdir+folderlist[f]+name+"_"+pre+"_ROI.zip");
	  		selectImage(post+" mask");
	  		run("Clear Results");
	  		roiManager("Measure");
	  		for(i=0;i<roiManager("Count");i++) {
	  			if(getResult("%Area",i) >= areapercent) {
	  				countArray = Array.concat(countArray,i);
	  			}	
	  		}
	  		run("Clear Results");
	  		selectImage(POI+"-unmask");
	  		for(j=0;j<countArray.length;j++)	{
	  			roiManager("Select", countArray[j]);
	  			roiManager("Measure");
	  			str = filelist[d]+"	"+countArray[j]+1+"	"+getResult("Area",j)+"		"+getResult("Mean",j)+"	"+getResult("IntDen",j)+"	"+getResult("RawIntDen",j);
	  			prepostPOIArray = Array.concat(prepostPOIArray,str);
	  		}
	  	}

		roiManager("reset");
		countArray = newArray();
		if(File.exists(resultdir+folderlist[f]+name+"_"+post+"_ROI.zip") ==1)	{
		 	roiManager("Open", resultdir+folderlist[f]+name+"_"+post+"_ROI.zip");
			selectImage(pre+" mask");
			run("Clear Results");
			roiManager("Measure");
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("%Area",i) >= areapercent) {
					countArray = Array.concat(countArray,i);
				}	
			}
			run("Clear Results");
			selectImage(POI+"-unmask");
			for(j=0;j<countArray.length;j++)	{
				roiManager("Select", countArray[j]);
				roiManager("Measure");
				str = "		"+countArray[j]+1+"	"+getResult("Area",j)+"	"+getResult("Mean",j)+"	"+getResult("IntDen",j)+"	"+getResult("RawIntDen",j)+"\n";
				postprePOIArray = Array.concat(postprePOIArray,str);
			}
		}

		//three mask overlap
		//prepostPOI = pre ROI that overlap at least 25% with the mask of post
		//the overlapping prepostROI are then laid over the POI mask and counted 
		

		//mask triple colocalization starts here
		roiManager("reset"); 
		run("Clear Results");
		if(File.exists(resultdir+folderlist[f]+name+"_"+pre+"_ROI.zip") ==1)	{
			countArray = newArray();
		  	roiManager("Open", resultdir+folderlist[f]+name+"_"+pre+"_ROI.zip");
			selectImage(post+" mask");
			roiManager("Measure");
			counted=0;
			x = 0;
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("%Area",i) >= areapercent) {
					countArray = Array.concat(countArray,i);
				}	
			}
			run("Clear Results");
			selectImage(POI+" mask");
			for(j=0;j<countArray.length;j++)	{
				roiManager("Select", countArray[j]);
				roiManager("Measure");
				if(getResult("%Area",j) >= areapercent) {
					counted++;
					prepostPOIArea = Array.concat(prepostPOIArea,name+"	"+countArray[j]+"	"+getResult("%Area",j));
				}
				x++;
				totalprepostPOIArea = Array.concat(totalprepostPOIArea,name+"	"+countArray[j]+"	"+getResult("%Area",j));
			}
			totalprepostPOIcount = x;
			prepostPOIcount = counted;

			roiManager("reset");
			roiManager("Open", resultdir+folderlist[f]+name+"_"+pre+"_ROI.zip");
			selectImage(POI+" mask");
			roiManager("Measure");
			counted=0;
			x = 0;
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("%Area",i) >= areapercent) {
					countArray = Array.concat(countArray,i);
				}	
			}
			run("Clear Results");
			selectImage(post+" mask");
			for(j=0;j<countArray.length;j++)	{
				roiManager("Select", countArray[j]);
				roiManager("Measure");
				if(getResult("%Area",j) >= areapercent) {
					counted++;
					prePOIpostArea = Array.concat(prePOIpostArea,name+"	"+countArray[j]+"	"+getResult("%Area",j));
				}
				x++;
				totalprePOIpostArea = Array.concat(totalprePOIpostArea,name+"	"+countArray[j]+"	"+getResult("%Area",j));	
			}
			totalprePOIpostcount = x;
			prePOIpostcount = counted;
		}
		else{
			totalprepostPOIcount = 0;
			prepostPOIcount = 0;
			totalprePOIpostcount = 0;
			prePOIpostcount = 0;
		}

		roiManager("reset"); 
		run("Clear Results");
		if(File.exists(resultdir+folderlist[f]+name+"_"+post+"_ROI.zip") ==1)	{
			countArray = newArray();
		  	roiManager("Open", resultdir+folderlist[f]+name+"_"+post+"_ROI.zip");
			selectImage(pre+" mask");
			roiManager("Measure");
			counted=0;
			x = 0;
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("%Area",i) >= areapercent) {
					countArray = Array.concat(countArray,i);
				}	
			}
			run("Clear Results");
			selectImage(POI+" mask");
			for(j=0;j<countArray.length;j++)	{
				roiManager("Select", countArray[j]);
				roiManager("Measure");
				if(getResult("%Area",j) >= areapercent) {
					counted++;
					postprePOIArea = Array.concat(postprePOIArea,name+"	"+countArray[j]+"	"+getResult("%Area",j));
				}
				x++;	
				totalpostprePOIArea = Array.concat(totalpostprePOIArea,name+"	"+countArray[j]+"	"+getResult("%Area",j));
			}
			totalpostprePOIcount = x;
			postprePOIcount = counted;

			roiManager("reset");
			roiManager("Open", resultdir+folderlist[f]+name+"_"+post+"_ROI.zip");
			selectImage(POI+" mask");
			roiManager("Measure");
			counted=0;
			x = 0;
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("%Area",i) >= areapercent) {
					countArray = Array.concat(countArray,i);
				}	
			}
			run("Clear Results");
			selectImage(post+" mask");
			for(j=0;j<countArray.length;j++)	{
				roiManager("Select", countArray[j]);
				roiManager("Measure");
				if(getResult("%Area",j) >= areapercent) {
					counted++;
					postPOIpreArea = Array.concat(postPOIpreArea,name+"	"+countArray[j]+"	"+getResult("%Area",j));
				}
				x++;	
				totalpostPOIpreArea = Array.concat(totalpostPOIpreArea,name+"	"+countArray[j]+"	"+getResult("%Area",j));	
			}
			totalpostPOIprecount = x;
			postPOIprecount = counted;
		}
		else{
			totalpostprePOIcount = 0;
			postprePOIcount = 0;
			totalpostPOIprecount = 0;
			postPOIprecount = 0;
		}

		roiManager("reset"); 
		run("Clear Results");
		if(File.exists(resultdir+folderlist[f]+name+"_"+POI+"_ROI.zip") ==1)	{
			countArray = newArray();
		  	roiManager("Open", resultdir+folderlist[f]+name+"_"+POI+"_ROI.zip");
			selectImage(pre+" mask");
			roiManager("Measure");
			counted=0;
			x = 0;
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("%Area",i) >= areapercent) {
					countArray = Array.concat(countArray,i);
				}	
			}
			run("Clear Results");
			selectImage(post+" mask");
			for(j=0;j<countArray.length;j++)	{
				roiManager("Select", countArray[j]);
				roiManager("Measure");
				if(getResult("%Area",j) >= areapercent) {
					counted++;
					POIprepostArea = Array.concat(POIprepostArea,name+"	"+countArray[j]+"	"+getResult("%Area",j));
				}
				x++;	
				totalPOIprepostArea = Array.concat(totalPOIprepostArea,name+"	"+countArray[j]+"	"+getResult("%Area",j));	
			}
			totalPOIprepostcount = x;
			POIprepostcount = counted;

			roiManager("reset");
			roiManager("Open", resultdir+folderlist[f]+name+"_"+POI+"_ROI.zip");
			selectImage(post+" mask");
			roiManager("Measure");
			counted=0;
			x = 0;
			for(i=0;i<roiManager("Count");i++) {
				if(getResult("%Area",i) >= areapercent) {
					countArray = Array.concat(countArray,i);
				}	
			}
			run("Clear Results");
			selectImage(pre+" mask");
			for(j=0;j<countArray.length;j++)	{
				roiManager("Select", countArray[j]);
				roiManager("Measure");
				if(getResult("%Area",j) >= areapercent) {
					counted++;
					POIpostpreArea = Array.concat(POIpostpreArea,name+"	"+countArray[j]+"	"+getResult("%Area",j));
				}
				x++;	
				totalPOIpostpreArea = Array.concat(totalPOIpostpreArea,name+"	"+countArray[j]+"	"+getResult("%Area",j));		
			}
			totalPOIpostprecount = x;
			POIpostprecount = counted;
		}
		else{
			totalPOIprepostcount = 0;
			POIprepostcount = 0;
			totalPOIpostprecount = 0;
			POIpostprecount = 0;
		}

		run("Close All"); 
		lengthArray = newArray(prepostPOIArea.length,postprePOIArea.length,POIpostpreArea.length,postPOIpreArea.length,POIprepostArea.length,prePOIpostArea.length);
		Array.getStatistics(lengthArray, min, max, mean, stdDev);
		g=0;
		//for(k=0;k<max;k++)	{
		//	prpoPO = "";
		//	poprPO = "";
		//	POpopr = "";
		//	poPOpr = "";
		//	POprpo = "";
		//	prPOpo = "";
		//	if(prepostPOIArea.length>=g){
		//		prpoPO = prepostPOIArea[k];
		//	}
		//	if(postprePOIArea.length>=g)	{
		//		poprPO = postprePOIArea[k];
		//	}
		//	if(POIpostpreArea.length>=g)	{
		//		POpopr = POIpostpreArea[k];
		//	}
		//	if(postPOIpreArea.length>=g)	{
		//		poPOpr = postPOIpreArea[k];
		//	}
		//	if(POIprepostArea.length>=g)	{
		//		POprpo = POIprepostArea[k];
		//	}
		//	if(prePOIpostArea.length>=g)	{
		//		prPOpo = prePOIpostArea[k];
		//	}
		//	******* = *******+prpoPO+"	"+poprPO+"	"+POpopr+"	"+poPOpr + "	"+POprpo+"	"+prPOpo+"\n";
		//	g++;
		//}
		tripleColocStr = tripleColocStr +name+"	"+ prepostPOIcount+"	"+totalprepostPOIcount+"		"+postprePOIcount+"	"+totalpostprePOIcount+"		"+POIpostprecount+"	"+totalPOIpostprecount+"		"+postPOIprecount+"	"+totalpostPOIprecount+"		"+POIprepostcount+"	"+totalPOIprepostcount+"		"+prePOIpostcount+"	"+totalprePOIpostcount+"\n";
		print(name+"	"+precount+"	"+postcount+"	"+POIcount+"		"+prepostcount+"	"+postprecount+"	"+prePOIcount+"	"+postPOIcount+"	"+POIprecount+"	"+POIpostcount+"		"+totalprepostcount+"	"+totalpostprecount+"	"+totalprePOIcount+"	"+totalpostPOIcount+"	"+totalPOIprecount+"	"+totalPOIpostcount+"		"+(prepostcount/totalprepostcount)+"	"+(postprecount/totalpostprecount)+"	"+(prePOIcount/totalprePOIcount)+"	"+(postPOIcount/totalpostPOIcount)+"	"+(POIprecount/totalPOIprecount)+"	"+(POIpostcount/totalPOIpostcount));
		//resultdir+folderlist[f] is the name of the condition
		temptitle = File.getName(resultdir+folderlist[f]);
	}
}

//correcting the length on the differentially sized arrays so they can be displayed properly on the
//the excel sheet and don't break the macro

//these take the strings and the log and save them as tab separated excel sheets

selectWindow("Log");
saveAs("Text", resultdir+"Summary.xls");
selectWindow("Log"); 
run("Close");
selectWindow("Results"); 
run("Close");
selectWindow("ROI Manager"); 
run("Close");

UMcountprepostprepre = UMcountprepostprepre +"				"+ pre+"ROI/"+post+"Img				"+ pre+"ROI/"+ pre+"Img\n";
for(k=0;k<prepostArray.length;k++)	{
	UMcountprepostprepre = UMcountprepostprepre + prepostArray[k] +prepreArray[k];
}

UMcountpostprepostpost = UMcountpostprepostpost+"				"+ post+"ROI/"+pre+"Img				"+ post+"ROI/"+ post+"Img\n";
for(o=0;o<postpreArray.length;o++)	{
	UMcountpostprepostpost = UMcountpostprepostpost + postpreArray[o] +postpostArray[o];
}

UMcountprePOIpostPOIPOIPOI = UMcountprePOIpostPOIPOIPOI+"				"+ pre+"ROI/"+POI+"Img				"+post+"ROI/"+POI+"Img					"+POI+"ROI/"+POI+"Img"+" \n";
for(v=0;v<prePOIArray.length;v++)	{
	if(prePOIArray.length>v){
		prePOI = prePOIArray[v];
	}
	else{
		prePOI = "					";
	}
	if(postPOIArray.length>v){
		postPOI = postPOIArray[v];
	}
	else{
		postPOI = "					";
	}
	if(POIPOIArray.length>v){
		POIPOI = POIPOIArray[v];
	}
	else{
		POIPOI = "					\n";
	}
	UMcountprePOIpostPOIPOIPOI = UMcountprePOIpostPOIPOIPOI + prePOI+postPOI+POIPOI;
}

UMcounttriple = UMcounttriple+"				"+ pre+post+"ROI/"+POI+"Img					"+post+pre+"ROI/"+POI+"Img\n";
for(m=0;m<prepostPOIArray.length;m++)	{
	if(prepostPOIArray.length>m){
		prepostPOI = prepostPOIArray[m];
	}
	else{
		prepostPOI = "				";
	}
	if(postprePOIArray.length>m){
		postprePOI = postprePOIArray[m];
	}
	else{
		postprePOI = "\n";
	}
	UMcounttriple = UMcounttriple + prepostPOI +postprePOI;
}

File.saveString(UMcountprepostprepre,resultdir+"PrePostintensity.xls");
File.saveString(UMcountpostprepostpost,resultdir+"PostPreintensity.xls");
File.saveString(UMcountprePOIpostPOIPOIPOI,resultdir+"prepostPOIintensity.xls");
File.saveString(UMcounttriple,resultdir+"POItripleintensity.xls");
File.saveString(tripleColocStr,resultdir+"tripleColoc_masks.xls");


//here's where the triple colocalized area quantification happens
//"overlap" is defined as at all overlapping
//"colocalized/coloc" is defined as at least 25% overlap
//

folderlist=getFileList(resultdir);
resultstring = "title	3chanColoc	pre-postColoc	Areaof3chanColoc	precount	postcount	POIcount\n";
resultstring = resultstring+"pre:	"+pre+"	post:	"+post+"	POI:	"+POI+"\n";
print("title	3chanColoc	pre-postColoc	Areaof3chanColoc	precount	postcount	POIcount");
print("pre:	"+pre+"	post:	"+post+"	POI:	"+POI);
for(x=0;x<folderlist.length;x++){
	filelist=getFileList(resultdir+folderlist[x]);
	//foldername = File.getName(resultdir+folderlist[x]);
	lastTitle = "temp";
	if(File.isDirectory(resultdir+folderlist[x])==1){
		resultstring = resultstring+folderlist[x]+"\n";
		print(folderlist[x]);
		for(p=0;p<filelist.length;p++){
			if(endsWith(File.getName(resultdir+folderlist[x]+filelist[p]), "_ROI.zip")==1){
				precount = 0;
				postcount = 0;
				POIcount = 0;
				area = 0;
				finalCount = 0;
				zipexists = 0;
				doublecount = 0;
				

				name = File.getName(resultdir+folderlist[x]+filelist[p]);

				index = indexOf(name,".tif");
				title =  substring(name, 0,(index+4));
				if(title == lastTitle){
					for(g=0;g<6;g++){
						v=0;
						if(substring(File.getName(resultdir+folderlist[x]+filelist[p]), 0,(index+4))==title){
							v++;
						}
						if((p+v)<filelist.length){
							p=p+v;
						}
					}
				}
				else{
					exists1 = 0;
					exists2 = 0;
					exists3 = 0;

					if(File.exists(resultdir+folderlist[x]+title+"_"+POI+"_ROI.zip")==1){
						index = indexOf(File.getName(resultdir+folderlist[x]+title+"_"+POI+"_ROI.zip"),"_"+POI+"_ROI.zip");							
						title =  substring(File.getName(resultdir+folderlist[x]+title+"_"+POI+"_ROI.zip"), 0,index);
						exists1 = 1;
					}
					if(File.exists(resultdir+folderlist[x]+title+"_"+post+"_ROI.zip")==1){
						index = indexOf(File.getName(resultdir+folderlist[x]+title+"_"+post+"_ROI.zip"),"_"+post+"_ROI.zip");
						title =  substring(File.getName(resultdir+folderlist[x]+title+"_"+post+"_ROI.zip"), 0,index);
						exists2 = 6;
					}
					if(File.exists(resultdir+folderlist[x]+title+"_"+pre+"_ROI.zip")==1){
						index = indexOf(File.getName(resultdir+folderlist[x]+title+"_"+pre+"_ROI.zip"),"_"+pre+"_ROI.zip");
						title =  substring(File.getName(resultdir+folderlist[x]+title+"_"+pre+"_ROI.zip"), 0,index);
						exists3 = 12;
					}
					
					zipexists = exists1+exists2+exists3;
		
					lastTitle = title;
					
					if(zipexists == 0){
						print(title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount);
						resultstring = resultstring+title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount+"\n";
						
					}
					if(zipexists == 1){
						roiManager("reset");
						run("Clear Results");
						roiManager("Open", resultdir+folderlist[x]+title+"_"+POI+"_ROI.zip");
						POIcount = roiManager("Count");
						print(title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount);
						resultstring = resultstring+title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount+"\n";
					}
					if(zipexists == 6){
						roiManager("reset");
						run("Clear Results");
						roiManager("Open", resultdir+folderlist[x]+title+"_"+post+"_ROI.zip");
						postcount = roiManager("Count");
						print(title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount);
						resultstring = resultstring+title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount+"\n";
					}
					if(zipexists == 12){
						roiManager("reset");
						run("Clear Results");
						roiManager("Open", resultdir+folderlist[x]+title+"_"+pre+"_ROI.zip");
						precount = roiManager("Count");
						print(title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount);
						resultstring = resultstring+title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount+"\n";				
					}
					if(zipexists == 13){
						roiManager("reset");
						run("Clear Results");
						roiManager("Open", resultdir+folderlist[x]+title+"_"+POI+"_ROI.zip");
						roiManager("show all without labels");
						open(resultdir+folderlist[x]+title+"_"+POI+"_mask.tif");
						ROI = newArray();
						POIcount = roiManager("Count");
						for(n=0;n<roiManager("Count");n++){
							ROI = Array.concat(ROI,n);
						}
						if(roiManager("Count")>1){
							roiManager("Select", ROI);
							roiManager("Combine");
							roiManager("Add");
							for(n=0;n<roiManager("Count")-1;n++){
								roiManager("Select", n);
								roiManager("Delete");
							}
							roiManager("Open", resultdir+folderlist[x]+title+"_"+pre+"_ROI.zip");
							roiManager("show all without labels");
							precount = (roiManager("Count")-1);
							ROI = newArray();
							if(roiManager("Count")>2){
								for(n=1;n<roiManager("Count");n++){
									ROI = Array.concat(ROI,n);
								}
								roiManager("Select", ROI);
								roiManager("Combine");
								roiManager("Add");
								for(n=1;n<roiManager("Count")-1;n++){
									roiManager("Select", n);
									roiManager("Delete");
								}
								roiManager("Select", newArray(0,1));
								roiManager("AND");
								if(selectionType() == 9 ){
									roiManager("Add");
									roiManager("Select", newArray(0,1));
									roiManager("Delete");
								}
								roiManager("Split");
								roiManager("Select", 0);
								roiManager("Delete");
								ROI = newArray();
								for(n=0;n<roiManager("Count");n++){
									ROI = Array.concat(ROI,n);
								}
								roiManager("Select", ROI);
								roiManager("Measure");
								doublecount = nResults;
							}
							selectImage(title+"_"+POI+"_mask.tif");
						}
						close();
						print(title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount);
						resultstring = resultstring+title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount+"\n";
					}
					if(zipexists == 7){
						roiManager("reset");
						run("Clear Results");
						roiManager("Open", resultdir+folderlist[x]+title+"_"+POI+"_ROI.zip");
						roiManager("show all without labels");
						open(resultdir+folderlist[x]+title+"_"+POI+"_mask.tif");
						ROI = newArray();
						POIcount = roiManager("Count");
						for(n=0;n<roiManager("Count");n++){
							ROI = Array.concat(ROI,n);
						}
						if(roiManager("Count")>1){
							roiManager("Select", ROI);
							roiManager("Combine");
							roiManager("Add");
							for(n=0;n<roiManager("Count")-1;n++){
								roiManager("Select", n);
								roiManager("Delete");
							}
							roiManager("Open", resultdir+folderlist[x]+title+"_"+post+"_ROI.zip");
							roiManager("show all without labels");
							postcount = (roiManager("Count")-1);
							ROI = newArray();
							if(roiManager("Count")>2){
								for(n=1;n<roiManager("Count");n++){
									ROI = Array.concat(ROI,n);
								}
								roiManager("Select", ROI);
								roiManager("Combine");
								roiManager("Add");
								for(n=1;n<roiManager("Count")-1;n++){
									roiManager("Select", n);
									roiManager("Delete");
								}
								roiManager("Select", newArray(0,1));
								roiManager("AND");
								if(selectionType() == 9 ){
									roiManager("Add");
									roiManager("Select", newArray(0,1));
									roiManager("Delete");
								}
								roiManager("Split");
								roiManager("Select", 0);
								roiManager("Delete");
								ROI = newArray();
								for(n=0;n<roiManager("Count");n++){
									ROI = Array.concat(ROI,n);
								}
								roiManager("Select", ROI);
								roiManager("Measure");
								doublecount = nResults;
							}
							print(title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount);
							resultstring = resultstring+title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount+"\n";
						}
						selectImage(title+"_"+POI+"_mask.tif");
						close();
					}
					if(zipexists == 18){
						roiManager("reset");
						run("Clear Results");
						roiManager("Open", resultdir+folderlist[x]+title+"_"+post+"_ROI.zip");
						roiManager("show all without labels");
						open(resultdir+folderlist[x]+title+"_"+post+"_mask.tif");
						ROI = newArray();
						postcount = roiManager("Count");
						for(n=0;n<roiManager("Count");n++){
							ROI = Array.concat(ROI,n);
						}
						if(roiManager("Count")>1){
							roiManager("Select", ROI);
							roiManager("Combine");
							roiManager("Add");
							for(n=0;n<roiManager("Count")-1;n++){
								roiManager("Select", n);
								roiManager("Delete");
							}
							roiManager("Open", resultdir+folderlist[x]+title+"_"+pre+"_ROI.zip");
							roiManager("show all without labels");
							precount = (roiManager("Count")-1);
							ROI = newArray();
							if(roiManager("Count")>2){
								for(n=1;n<roiManager("Count");n++){
									ROI = Array.concat(ROI,n);
								}
								roiManager("Select", ROI);
								roiManager("Combine");
								roiManager("Add");
								for(n=1;n<roiManager("Count")-1;n++){
									roiManager("Select", n);
									roiManager("Delete");
								}
								roiManager("Select", newArray(0,1));
								roiManager("AND");
								if(selectionType() == 9 ){
									roiManager("Add");
									roiManager("Select", newArray(0,1));
									roiManager("Delete");
								}
								roiManager("Split");
								roiManager("Select", 0);
								roiManager("Delete");
								ROI = newArray();
								for(n=0;n<roiManager("Count");n++){
									ROI = Array.concat(ROI,n);
								}
								roiManager("Select", ROI);
								roiManager("Measure");
								doublecount = nResults;
							}
							print(title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount);
							resultstring = resultstring+title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount+"\n";
						}
						selectImage(title+"_"+post+"_mask.tif");
						close();
						}
			
					if(zipexists==19){
						roiManager("reset");
						run("Clear Results");
						roiManager("Open", resultdir+folderlist[x]+title+"_"+pre+"_ROI.zip");
						roiManager("show all without labels");
						open(resultdir+folderlist[x]+title+"_"+pre+"_mask.tif");
						ROI = newArray();
						precount = roiManager("Count");
						for(n=0;n<roiManager("Count");n++){
							ROI = Array.concat(ROI,n);
						}
						if(roiManager("Count")>1){
							roiManager("Select", ROI);
							roiManager("Combine");
							roiManager("Add");
							for(n=0;n<roiManager("Count")-1;n++){
								roiManager("Select", n);
								roiManager("Delete");
							}
							roiManager("Open", resultdir+folderlist[x]+title+"_"+post+"_ROI.zip");
							roiManager("show all without labels");
							postcount = (roiManager("Count")-1);
							ROI = newArray();
							if(roiManager("Count")>2){
								for(n=1;n<roiManager("Count");n++){
									ROI = Array.concat(ROI,n);
								}
								roiManager("Select", ROI);
								roiManager("Combine");
								roiManager("Add");
								for(n=2;n<roiManager("Count");n++){
									roiManager("Select", n);
									roiManager("Delete");
								}
								roiManager("Select", newArray(0,1));
								roiManager("AND");
								if(selectionType() == 9 ){
									roiManager("Add");
									roiManager("Select", newArray(0,1));
									roiManager("Delete");
									roiManager("Open", resultdir+folderlist[x]+title+"_"+POI+"_ROI.zip");
									roiManager("show all without labels");
									POIcount = (roiManager("Count")-1);
									ROI = newArray();
									for(n=1;n<(roiManager("Count"));n++){
										ROI = Array.concat(ROI,n);
									}
									roiManager("Select", ROI);
									run("Clear Results");
									roiManager("Measure");
									doublecount = nResults;
									roiManager("Select", ROI);
									roiManager("Combine");
									roiManager("Add");
									for(n=1;n<(roiManager("Count")-1);n++){
										roiManager("Select", n);
										roiManager("Delete");
									}
									roiManager("Select", newArray(0,1));
									roiManager("AND");
									if(selectionType() == 9 ){
										roiManager("Add");
										roiManager("Select", newArray(0,1));
										roiManager("Delete");
										roiManager("Select", 0);
										roiManager("Split");
										ROI = newArray();
										for(n=1;n<roiManager("Count");n++){
											ROI = Array.concat(ROI,n);
										}
										roiManager("Select", ROI);
										run("Clear Results");
										roiManager("Measure");
										roiManager("Select", 0);
										roiManager("Delete");
										for(t=0;t<nResults;t++){
											area = area+getResult("Area",t);
										}
										area = area/nResults;
										finalCount = nResults;
									
										print(title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount);
										resultstring = resultstring+title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount+"\n";
										selectImage(title+"_"+pre+"_mask.tif");
										close();
									}
									else{
										print(title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount);
										resultstring = resultstring+title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount+"\n";
										roiManager("reset");
										run("Clear Results");
										selectImage(title+"_"+pre+"_mask.tif");
										close();
									}
								}
								else{
									print(title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount);
									resultstring = resultstring+title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount+"\n";
									roiManager("reset");
									run("Clear Results");
									selectImage(title+"_"+pre+"_mask.tif");
									close();
								}
							}
							else{
								print(title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount);
								resultstring = resultstring+title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount+"\n";
								roiManager("reset");
								run("Clear Results");
								selectImage(title+"_"+pre+"_mask.tif");
								close();
							}
						}
						else{
							print(title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount);
							resultstring = resultstring+title+"	"+finalCount+"	"+doublecount+"	"+area+"	"+precount+"	"+postcount+"	"+POIcount+"\n";
							roiManager("reset");
							run("Clear Results");
							selectImage(title+"_"+pre+"_mask.tif");
							close();
						}
					}
					else{
						roiManager("reset");
						run("Clear Results");
					}
				}
			}
			else{
			}
		}
	}
}
File.saveString(resultstring,resultdir+"TripleColocAreaOverlap.xls");



//the following functions are listed in order of use in the macro

//thresholding parameters are generally the only ones that need changing, but all can be modified
function parameterinput()
	{
	Dialog.create("Parameter");

		Dialog.addNumber("Area Percent (%):", 25);
		Dialog.addNumber("Pixel Scale (um/pixel):", 0.1803752);
		Dialog.addNumber("Min Puncta Size (pixel):", 5);
		Dialog.addNumber("Max Puncta Size (pixel):", 60);
		Dialog.addChoice("presynaptic channel",colors,colors[0]);
		Dialog.addChoice("postsynaptic channel",colors,colors[1]);
		Dialog.addChoice("associated protein of interest",colors,colors[2]);
	Dialog.show();
	areapercent = Dialog.getNumber();  
	scale = Dialog.getNumber();  
	minsize = Dialog.getNumber();  
	maxsize = Dialog.getNumber(); 
	pre = Dialog.getChoice();
	post = Dialog.getChoice();
	POI = Dialog.getChoice();
	}
	
//there were more functions, but arrays don't populate within a function so in this macro
//they're a little less useful
