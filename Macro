//Redone - Bea C. 2018
//original macro by Lai Ding at Harvard

// ImageJ initialize
run("Colors...", "foreground=white background=black selection=magenta");
run("Options...", "iterations=1 count=1 black edm=Overwrite");
run("Set Measurements...", "area mean perimeter integrated area_fraction limit redirect=None decimal=5");

//set raw result folder. rawdir contains multiple subfolders, each subfolder contains multiple raw images
//each image is RGB format
//result and dendrites folders should be empty.
rawdir=getDirectory("Choose Raw Data Folder");
resultdir=getDirectory("Choose Result Folder");

//variable setup
var greenThreshold, redThreshold, blueThreshold, areapercent, scale, minsize, maxsize, name, onecount, twocount, onetwocount, twoonecount, axonlength, axonflag;
var onestring, twostring, threestring, resultlist, FolderCreate, foldername, twoonecount, onetwocount, totaltwoonecount, totalonetwocount;
var UMcountrgrr, UMcountgrgg, str, oneTwoRatio, twoTwoRatio, ratioTemp, GRBArray, GGRArray, RGBArray, RRBArray, colors;
var channel1, channel2, channel3 ;


//three thresholds - specify which channel is for "pre-", post-, and protein of interest
//restrict the ROI of the "presynaptic" marker to the puncta associated with postsynaptic puncta
//get the intensity of the presynaptic marker within the protein of interest ROI
//and compare it to the overall intensity of the protein of interest within its own ROI?
//so, if you have G/R/B, with G=pre, R=post, B=POI, R associated G puncta used to assess the intensity of B signal
//within the G ROI and the intensity of the B signal within the B ROI.

// input parameter

parameterinput();

print("Raw_Folder:	"+rawdir);
print("Result_Folder:	"+resultdir);
print("GreenThreshold	RedThreshold	BlueThreshold	AreaPercent(%)	PixelScale(um/pixel)	Min_Puncta_Size	Max_Puncta_Size");
print(greenThreshold+"	"+redThreshold+"	"+blueThreshold+"	"+areapercent+"	"+scale+"	"+minsize+"	"+maxsize);
print(" 	GreenPuncta#	RedPuncta#	BluePuncta#	GR#	RG#	DendriteLength(um)	Density_G(#/um)	Density_R(#/um)	Density_GR(#/um)	Density_RG(#/um)		gr_%AreaAvg(counted)	gr_%AreaAvg(total)	gr_totalCounted	rg_%AreaAvg(counted)	rg_%AreaAvg(total)	rg_totalCounted");

folderlist=getFileList(rawdir);

//the below code was added as apart of a replacement for a javascript that automatically created and selected a subfolder 
//for the result data. It broke and there is now an imagej language only fix.

//Dialog.create("Conditions");
//	Dialog.addMessage("How many conditions do you have?");
//	conditions = newArray(1,2,3,4,5,6,7,8);
//	Dialog.setInsets(2,40,2);
//	Dialog.addChoice("",conditions);
//Dialog.show();
//FolderCreate = Dialog.getChoice();

//setup for the intensity analysis, overlay of ROI on unmasked channel
//GR = green ROI/red image
//GG = green ROI/green image
//RG = red ROI/green image
//RR = red ROI/red image

GRBArray = newArray("");
GGRArray = newArray("");

RGBArray = newArray(""); 
RRBArray = newArray("");
oneTwoRatio = newArray("");
twoTwoRatio = newArray("");

if(channel1=="Green")
{
	one = "G";
}
else if (channel1 == "Red")
{
	one = "R";
}
else ()
{
	one = "B";
}

//this is for the unmasked puncta quant string in the intensity analysis
//grgg is using the green ROI over red/green image
//rgrr is using the red ROI over the green/red image

UMcountgrgg = " Filename	#	AreaOfPuncta	GR%Overlap	GRmeanGrey	GRint_density(um)	GRraw_int_den(pix)		AreaOfPuncta	GG%Overlap	GGmeanGrey	GGint_density(um)	GGraw_int_den(pix)\n";
UMcountrgrr = "Filename	#	AreaOfPuncta	RG%Overlap	RGmeanGrey	RGint_density(um)	RGraw_int_den(pix)		AreaOfPuncta	RR%Overlap	RRmeanGrey	RRint_density(um)	RRraw_int_den(pix)\n";

//"foldercreate" is for generation of result folders - at the time of making this, it didn't allow for autoselection
//of the result folder with the code. Might be worth going back thru to see if it can be done a diff
//way that reduces the input I've gotta do

for(f=0;f<folderlist.length;f++) 
	{
	//onestring="Filename	#	Area	Perim\n";
	//twostring="Filename	#	Area	Perim\n";
	//threestring="Filename	#	Area	Perim\n";
	foldername = File.getName(rawdir+folderlist[f]);
	File.makeDirectory(resultdir+foldername);
	rawlist=getFileList(rawdir+foldername);
	filelist=getFileList(rawdir+folderlist[f]);
	resultpath = getFileList(rawdir+folderlist[f]);
	print(folderlist[f]);

	GRBArray = Array.concat(GRBArray,folderlist[f]+"\n");
	GGRArray = Array.concat(GGRArray,"");
	RGBArray = Array.concat(RGBArray,folderlist[f]+"\n");
	RRBArray = Array.concat(RRBArray,"");


	for(d=0;d<filelist.length;d++)
		{
		//initialize :  open file, split channel, name by "red"/"green"/"blue"/"axon"
		initialize();

		//create green, red, blue mask images and roi files
		mask(channel1); 
		mask(channel2);
		mask(channel3);

		//measure
		
		//the function below was moved to be actual code because arrays don't populate within a fx in javascript/imagej language
		//in imagej because it's dumb.

		//this function opens the saved ROI files for the green and red channels of each image and overlays them
		//either using the green mask as the base image and checking for overlap of the red puncta or vice versa
		//because the puncta sizes differ, this can be pretty variable between G and R
		//upon checking by hand, at 25% overlap, the one that most closely aligns is GR
		totalonetwocount = 0;
		totaltwoonecount = 0;
		twoonecount = 0;
		onetwocount = 0;

		//maybe have the variables set up so that it cycles through a test of all three channels three times with 
		//each different raw image? I don't want to have one condition less robust than the other two because
		//I know that this is going to be a problem for me in the future if so.


		roiManager("reset");
		if( onecount > 0 ) {
 	 		roiManager("Open", resultdir+folderlist[f]+name+"_Green_ROI.zip");
			}
		selectImage("red mask");
		run("Clear Results");
		roiManager("Measure");
		onetwocount=0;
		x = 0;
		for(i=0;i<roiManager("Count");i++) {
			totalonetwocount = totalonetwocount + getResult("%Area",i);
			if( getResult("%Area",i) >= areapercent ) {
				onetwocount++;
				onetwocount = onetwocount + getResult("%Area",i);
			}
			x++;
		}

		//channel-unmask is the direct image, without a mask

		selectImage("green-unmask");
		run("Clear Results");
		roiManager("Measure");
		for(i=0;i<roiManager("Count");i++) {
			//this str just stores the values from the ROI measure function to be put into the appropriate array for the green ROI
			str = filelist[d]+"	"+i+1+"	"+getResult("Area",i)+"	"+getResult("%Area",i)+"	"+ getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i);
			GRBArray = Array.concat(GRBArray,str);
		}
		selectImage("red-unmask");
		run("Clear Results");
		roiManager("Measure");
		//For the "triple coloc" have the GR, GG, RG, RR associated with the third channel - in this case 
		//roiManager("Select", 0);
		for(i=0;i<roiManager("Count");i++) {
			str = "		"+getResult("Area",i)+"	"+getResult("%Area",i)+"	"+ getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i)+"\n";
			GGRArray = Array.concat(GGRArray,str);
		}
		selectImage("blue-unmask");
		run("Clear Results");
		roiManager("Measure");
		for(i=0;i<roiManager("Count");i++) {
			//this str just stores the values from the ROI measure function to be put into the appropriate array for the green ROI
			str = filelist[d]+"	"+i+1+"	"+getResult("Area",i)+"	"+getResult("%Area",i)+"	"+ getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i);
			GRBArray = Array.concat(GRBArray,str);
		}

		xgreen = x;
		totalonetwocount = totalonetwocount/x;
		onetwocount = onetwocount/onetwocount;

		roiManager("reset"); 
		run("Clear Results");
		
		if( twocount > 0 ) {
 	 		roiManager("Open", resultdir+folderlist[f]+name+"_Red_ROI.zip");
			}
		selectImage("green mask");
		run("Clear Results");
		roiManager("Measure");
		twoonecount=0;
		x = 0;
		for(i=0;i<roiManager("Count");i++) {
			totaltwoonecount = totaltwoonecount + getResult("%Area",i);
			if(getResult("%Area",i) >= areapercent) {
				twoonecount++;
				twoonecount = twoonecount + getResult("%Area",i);
			}
			x++;
		}
		selectImage("green-unmask");
		run("Clear Results");
		roiManager("Measure");
		for(i=0;i<roiManager("Count");i++) {
			//then the red ROI
			str = filelist[d]+"	"+i+1+"	"+getResult("Area",i)+"	"+getResult("%Area",i)+"	"+ getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i);
			RGBArray = Array.concat(RGBArray,str);
		}
		selectImage("red-unmask");
		run("Clear Results");
		roiManager("Measure");
		for(i=0;i<roiManager("Count");i++) {
			str = "		"+getResult("Area",i)+"	"+getResult("%Area",i)+"	"+ getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i)+"\n";
			RRBArray = Array.concat(RRBArray,str);
		}
		selectImage("blue-unmask");
		run("Clear Results");
		roiManager("Measure");
		for(i=0;i<roiManager("Count");i++) {
			str = "		"+getResult("Area",i)+"	"+getResult("%Area",i)+"	"+ getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i)+"\n";
			RRBArray = Array.concat(RRBArray,str);
		}
		xred = x;
		totaltwoonecount = (totaltwoonecount/x);
		twoonecount = twoonecount/twoonecount;

		roiManager("reset"); 
		run("Clear Results");
		
		if( threecount > 0 ) {
 	 		roiManager("Open", resultdir+folderlist[f]+name+"_Blue_ROI.zip");
			}
		selectImage("green mask");
		run("Clear Results");
		roiManager("Measure");
		twoonecount=0;
		x = 0;
		for(i=0;i<roiManager("Count");i++) {
			totaltwoonecount = totaltwoonecount + getResult("%Area",i);
			if(getResult("%Area",i) >= areapercent) {
				twoonecount++;
				twoonecount = twoonecount + getResult("%Area",i);
			}
			x++;
		}
		selectImage("green-unmask");
		run("Clear Results");
		roiManager("Measure");
		for(i=0;i<roiManager("Count");i++) {
			//then the red ROI
			str = filelist[d]+"	"+i+1+"	"+getResult("Area",i)+"	"+getResult("%Area",i)+"	"+ getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i);
			RGBArray = Array.concat(RGBArray,str);
		}
		selectImage("red-unmask");
		run("Clear Results");
		roiManager("Measure");
		for(i=0;i<roiManager("Count");i++) {
			str = "		"+getResult("Area",i)+"	"+getResult("%Area",i)+"	"+ getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i)+"\n";
			RRBArray = Array.concat(RRBArray,str);
		}
		selectImage("blue-unmask");
		run("Clear Results");
		roiManager("Measure");
		for(i=0;i<roiManager("Count");i++) {
			str = "		"+getResult("Area",i)+"	"+getResult("%Area",i)+"	"+ getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i)+"\n";
			RRBArray = Array.concat(RRBArray,str);
		}
		xred = x;
		totaltwoonecount = (totaltwoonecount/x);
		twoonecount = twoonecount/twoonecount;

		roiManager("reset"); 
		run("Clear Results");
		//prints this + variable strings produced from the other functions to the log to be saved
		print(name+"	"+onecount+"	"+twocount+"	"+onetwocount+"	"+twoonecount+"	"+axonlength+"	"+(onecount/axonlength)+"	"+(twocount/axonlength)+"	"+(twoonecount/axonlength)+"	"+(onetwocount/axonlength)+"		"+onetwocount+"	"+totalonetwocount+"	"+xgreen+"	"+twoonecount+"	"+totaltwoonecount+"	"+xred);

		run("Close All"); 

		//resultdir+folderlist[f] is the name of the condition
		temptitle = File.getName(resultdir+folderlist[f]);
		}
	//File.saveString(onestring, resultdir+folderlist[f]+temptitle+"_"+channel1+"Area.xls");
	//File.saveString(twostring, resultdir+folderlist[f]+temptitle+"_"+channel2+"Area.xls"); 
	//File.saveString(threestring, resultdir+folderlist[f]+temptitle+"_"+channel3+"Area.xls");  

	}

//This takes the arrays and puts them into the string - they were arrays
//because the method in which the ROI quant is collected only permits one measurement at a time
//and swapping back and forth between images and measuring the image individually between
//each single puncta seems less straightforward than just making it an array

UMcountgrgg = UMcountgrgg + "greenROI/redImg								greenROI/greenImg\n";
for(k=0;k<GRBArray.length;k++)	{
	UMcountgrgg = UMcountgrgg + GRBArray[k] +GGRArray[k];
}
UMcountrgrr = UMcountrgrr + "redROI/greenImg								redROI/redImg\n";
for(k=0;k<RGBArray.length;k++)	{
	UMcountrgrr = UMcountrgrr + RGBArray[k] +RRBArray[k];
}

//these take the strings and the log and save them as tab separated excel sheets
selectWindow("Log");
saveAs("Text", resultdir+"Summary.xls");
selectWindow("Log"); 
run("Close");
selectWindow("Results"); 
run("Close");
selectWindow("ROI Manager"); 
run("Close");
File.saveString(UMcountgrgg,resultdir+"rawGRintensity.xls");
File.saveString(UMcountrgrr,resultdir+"rawRGintensity.xls");

//the following functions are listed in order of use in the macro

//thresholding parameters are generally the only ones that need changing, but all can be modified
function parameterinput()
	{
	colors = newArray("Green, Red, Blue");
	Dialog.create("Parameter");
		Dialog.addNumber("Green Threshold:", 30);
		Dialog.addNumber("Red Threshold:", 30);
		Dialog.addNumber("Blue Threshold", 30);
		Dialog.addNumber("Area Percent (%):", 25);
		Dialog.addNumber("Pixel Scale (um/pixel):", 0.1705);
		Dialog.addNumber("Min Puncta Size (pixel):", 1);
		Dialog.addNumber("Max Puncta Size (pixel):", 60);
		Dialog.addChoice("presynaptic\nchannel",colors[0]);
		Dialog.addChoice("postsynaptic\nchannel",colors[1]);
		Dialog.addChoice("associated protein\nof interest",colors[2]);
	Dialog.show();
	greenThreshold = Dialog.getNumber();
	redThreshold = Dialog.getNumber();
	blueThreshold = Dialog.getNumber();
	areapercent = Dialog.getNumber();  
	scale = Dialog.getNumber();  
	minsize = Dialog.getNumber();  
	maxsize = Dialog.getNumber(); 
	channel1 = Dialog.getChoice();
	channel2 = Dialog.getChoice();
	channel3 = Dialog.getChoice();
	}
	
//this function opens the appropriate image from the appropriate folder in the raw data folder
//gets the name, standardizes the properties of the image, splits the channels and discards the blue channel 
//as "axon" to be saved elsewhere

function initialize()
 {
	open(rawdir+foldername+File.separator+rawlist[d]);
	name=getInfo("image.filename");
	run("Properties...", "channels=1 slices=1 frames=1 unit=um pixel_width="+scale+" pixel_height=0.1705 voxel_depth=1");
	run("Split Channels");

	selectImage(name+" (blue)"); 
	rename("blue");
	run("Duplicate...", " ");
	selectImage("blue-1"); 
	rename("blue-unmask");

	selectImage(name+" (green)"); 
	rename("green");
	run("Duplicate...", " ");
	selectImage("green-1"); 
	rename("green-unmask");

	selectImage(name+" (red)"); 
	rename("red");
	run("Duplicate...", " ");
	selectImage("red-1"); 
	rename("red-unmask");
 }

//this function creates a mask for the selected color channel (green or red). 
//it takes the threshold indicated in the parameter input, uses it to point out the maxima 
//and then runs "analyze particles" within the specified puncta size, saves the number of puncta as a string, saves the ROI, 
//and saves the mask

function mask(channel)
	{
	selectImage(channel);
	run("Gaussian Blur...", "sigma=1");
	if( channel == "Green") {
		setThreshold(greenThreshold, 255);
		}
	if( channel == "Red") {
		setThreshold(redThreshold, 255);
		}
	if( channel == "Blue") {
		setThreshold(blueThreshold, 255);
		}
	run("Find Maxima...", "noise=10 output=[Segmented Particles] above");
	run("Analyze Particles...", "size="+minsize+"-"+maxsize+" pixel show=Masks add");
	selectWindow("Mask of "+channel+" Segmented");  
	run("Grays");
	saveAs("Tiff", resultdir+folderlist[f]+name+"_"+channel+"_mask.tif");
	run("Clear Results");
	roiManager("Measure");
	selectWindow("Results");
  	
	//if( channel == "green")
	//	{
	//	for(j=0;j<nResults;j++) {
	//		onestring = onestring+filelist[d]+"	"+j+1+"	"+getResult("Area",j)+"	"+getResult("Perim.",j)+"\n";
	//		}
	//	}
	//if( channel == "red")
	//	{
	//	for(j=0;j<nResults;j++) {
	//		twostring = twostring+filelist[d]+"	"+j+1+"	"+getResult("Area",j)+"	"+getResult("Perim.",j)+"\n";
	//		}
	//	}
	//if( channel == "blue")
	//	{
	//	for(j=0;j<nResults;j++) {
	//		threestring = threestring+filelist[d]+"	"+j+1+"	"+getResult("Area",j)+"	"+getResult("Perim.",j)+"\n";
	//		}
	//	}
  
	run("Clear Results");
	rename(channel+" mask");
	selectImage(channel); close();
	selectImage(channel+" Segmented"); close();

	if( channel == "green" )  {
		onecount = roiManager("Count");
		}
	if( channel == "red" )  {
		twocount = roiManager("Count");
		}
  
	if( roiManager("Count") > 0 )
		{
		roiManager("Save",resultdir+folderlist[f]+name+"_"+channel+"_ROI.zip");
		}
	roiManager("reset");
	}

//this function increases the contrast for the blue channel (marking dendrites even though it says axons)
//and measures the length of the segment (even though this is usually also done manually as a precaution)
