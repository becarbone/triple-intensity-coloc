//Redone - Bea C. 2018
//original macro by Lai Ding at Harvard

// ImageJ initialize
run("Colors...", "foreground=white background=black selection=magenta");
run("Options...", "iterations=1 count=1 black edm=Overwrite");
run("Set Measurements...", "area mean perimeter integrated area_fraction limit redirect=None decimal=5");

//set raw result folder. rawdir contains multiple subfolders, each subfolder contains multiple raw images
//each image is RGB format
//result and dendrites folders should be empty.
rawdir=getDirectory("Choose Raw Data Folder");
resultdir=getDirectory("Choose Result Folder");

//variable setup
var greenThreshold, redThreshold, blueThreshold, areapercent, scale, minsize, maxsize, name, precount, postcount, POIcount, prepostcount, postprecount;
var resultlist, FolderCreate, foldername, postprecount, prepostcount, totalpostprecount, totalprepostcount;
var UMcountpostprepostpost, UMcountprepostprepre, str, prepostRatio, postpostRatio, ratioTemp, prepostArray, prepreArray, postpreArray, postpostArray, colors;
var pre, post, POI, UMcountprePOIpostPOIPOIPOI, prePOIcount, postPOIcount, marker, second, third, mscount, xpre, xpost, xPOI, countArray;
var folderlist, rawdir, filelist, resultpath, totalprePOIcount, totalpostPOIcount, markersecondcount, markersecondArray, markerthirdcount, markerthirdArray;
var totalmarkersecondcount, totalmarkerthirdcount;

//three thresholds - specify which channel is for "pre-", post-, and protein of interest (POI)
//restrict the ROI of the "presynaptic" marker to the puncta associated with postsynaptic puncta
//get the intensity of the presynaptic marker within the protein of interest ROI
//and compare it to the overall intensity of the protein of interest within its own ROI?
//so, if you have G/R/B, with G=pre, R=post, B=POI, R associated G puncta used to assess the intensity of B signal
//within the G ROI and the intensity of the B signal within the B ROI.

// input parameter

colors = newArray("Green", "Red", "Blue");
parameterinput();

print("Raw_Folder:	"+rawdir);
print("Result_Folder:	"+resultdir);
print("GreenThreshold	RedThreshold	BlueThreshold	AreaPercent(%)	PixelScale(um/pixel)	Min_Puncta_Size	Max_Puncta_Size");
print(greenThreshold+"	"+redThreshold+"	"+blueThreshold+"	"+areapercent+"	"+scale+"	"+minsize+"	"+maxsize);
//mod this portion to display the ratio of counted to total GR/RG puncta
print(" 	"+pre+"Puncta#	"+post+"Puncta#	"+POI+"Puncta#	"+pre+post+"#	"+post+pre+"#	DendriteLength(um)	Density_G(#/um)	Density_R(#/um)	Density_GR(#/um)	Density_RG(#/um)		gr_%AreaAvg(counted)	gr_%AreaAvg(total)	gr_totalCounted	rg_%AreaAvg(counted)	rg_%AreaAvg(total)	rg_totalCounted");
// add 
folderlist=getFileList(rawdir);

//setup for the intensity analysis, overlay of ROI from mask on unmasked channel image
//prepost = pre ROI/post image
//prepre = pre ROI/pre image
//postpreArray = post ROI/pre image
//postpost = post ROI/post image
//prePOI = pre ROI/POI image
//postPOI = post ROI/POI image
//POIPOI = POI ROI/POI image
//prepostPOI = pre associated post ROI/POI image
//postprePOI = post associated pre ROI/POI image

//these arrays are for two channel associations
prepostArray = newArray("");
prepreArray = newArray("");
postpreArray = newArray(""); 
postpostArray = newArray("");
prePOIArray = newArray("");
postPOIArray = newArray("");
POIPOIArray = newArray("");

countArray = newArray();

//these arrays are for two channel associations dependent on a third
prepostPOIArray = newArray("");
postprePOIArray = newArray("");

//prepostRatio = newArray("");
//postpostRatio = newArray("");

UMcountprepostprepre = " Filename	#	AreaOf"+pre+"ROI		PrePost%Overlap	PrePostmeanGrey	PrePostint_density(um)	PrePostraw_int_den(pix)		PrePre%Overlap	PrePremeanGrey	PrePreint_density(um)	PrePreraw_int_den(pix)\n";
UMcountpostprepostpost = "Filename	#	AreaOf"+post+"ROI		PostPre%Overlap	PostPremeanGrey	PostPreint_density(um)	PostPreraw_int_den(pix)		PostPost%Overlap	PostPostmeanGrey	PostPostint_density(um)	PostPostraw_int_den(pix)\n";
UMcountprePOIpostPOIPOIPOI = "Filename	#	AreaOf"+pre+"ROI		PrePOI%Overlap	PrePOImeanGrey	PrePOIint_density(um)	PrePOIraw_int_den(pix)		AreaOf"+post+"ROI	PostPOI%Overlap	PostPOImeanGrey	PostPOIint_density(um)	PostPOIraw_int_den(pix)			AreaOf"+POI+"ROI	POIPOI%Overlap	POIPOImeanGrey	POIPOIint_density(um)	POIPOIraw_int_den(pix)\n";
UMcounttriple = "Filename	#	AreaOf"+pre+post+"assocROI		PrePostPOIPOI%Overlap	PrePostPOIPOImeanGrey	PrePostPOIPOIint_density(um)	PrePostPOIraw_int_den(pix)		PostPrePOI%Overlap	PostPrePOImeanGrey	PostPrePOIint_density(um)	PostPrePOIraw_int_den(pix)\n";

//"foldercreate" is for generation of result folders - at the time of making this, it didn't allow for autoselection
//of the result folder with the code. Might be worth going back thru to see if it can be done a diff
//way that reduces the input I've gotta do

for(f=0;f<folderlist.length;f++) {
	foldername = File.getName(rawdir+folderlist[f]);
	File.makeDirectory(resultdir+foldername);
	rawlist=getFileList(rawdir+foldername);
	filelist=getFileList(rawdir+folderlist[f]);
	resultpath = getFileList(rawdir+folderlist[f]);
	print(folderlist[f]);

	prepostArray = Array.concat(prepostArray,folderlist[f]+"\n");
	prepreArray = Array.concat(prepreArray,"");
	postpreArray = Array.concat(postpreArray,folderlist[f]+"\n");
	postpostArray = Array.concat(postpostArray,"");
	prePOIArray = Array.concat(prePOIArray,folderlist[f]+"\n");
	postPOIArray = Array.concat(postPOIArray,"");
	POIPOIArray = Array.concat(POIPOIArray,"");

	prepostPOIArray = Array.concat(prepostPOIArray,folderlist[f]+"\n");
	postprePOIArray = Array.concat(postprePOIArray,"");

	for(d=0;d<filelist.length;d++) {
		//initialize :  open file, split channel, name by "red"/"green"/"blue"/"axon"
		initialize();

		//create green, red, blue mask images and roi files
		mask(pre); 
		mask(post);
		mask(POI);

		//this function opens the saved ROI files for the green, red, blue channels of each image and overlays them
		//either using the green mask as the base image and checking for overlap of the red puncta, etc...
		//because the puncta sizes differ, this can be pretty variable between G, R, B

		totalprepostcount = 0;
		totalpostprecount = 0;
		totalprePOIcount = 0;
		totalpostPOIcount = 0;
		prepostcount = 0;
		postprecount = 0;
		prePOIcount = 0;
		postPOIcount = 0;

		//measure
		
		//the function below was moved to be actual code because arrays don't populate within a fx in javascript/imagej language
		//in imagej because it's dumb.

		for(r=0;r<3;r++){
			//maybe have the variables set up so that it cycles through a test of all three channels three times with 
			//each different raw image? I don't want to have one condition less robust than the other two because
			//I know that this is going to be a problem for me in the future if so.
			if(r==0){
				//setting up the color for the ROI
				marker = pre;
				//setting up the color for the image 
				second = post;
				count = precount;
			}
			if(r==1){
				marker = post;
				second = pre;
				count = postcount;
			}
			if(r==2){
				marker = POI;
				second = pre;
				third = post;
				count = POIcount;
			}

			roiManager("reset");
			if(count > 0) {
	 	 		roiManager("Open", resultdir+folderlist[f]+name+"_"+marker+"_ROI.zip");
			}
			selectImage(second+" mask");
			run("Clear Results");
			roiManager("Measure");
			mscountx=0;
			x = 0;
			for(i=0;i<roiManager("Count");i++) {
				if(r==0){
					totalprepostcount = totalprepostcount + getResult("%Area",i);
				}
				if(r==1){
					totalpostprecount = totalpostprecount + getResult("%Area",i);
				}
				
				if(getResult("%Area",i) >= areapercent) {
					mscountx++;
					if(r==0){
						prepostcount = prepostcount + getResult("%Area",i);
					}
					if(r==1){
						postprecount = postprecount + getResult("%Area",i);
					}
					x++;
				}
				
			}

			if(r==0){
				xpre = x;
				totalprepostcount = totalprepostcount/x;
				prepostcount = prepostcount/mscountx;
			}
			if(r==1){
				xpost = x;
				totalpostprecount = totalpostprecount/x;
				postprecountcount = postprecountcount/mscountx;
			
			if(r==2){
				roiManager("reset");
				if(POIcount> 0 ) {
	 	 			roiManager("Open", resultdir+folderlist[f]+name+"_"+second+"_ROI.zip");
				}
				selectImage(marker+" mask");
				run("Clear Results");
				roiManager("Measure");
				mscountv=0;
				v = 0;
				for(i=0;i<roiManager("Count");i++) {
					totalpostPOIcount = totalprePOIcount + getResult("%Area",i);
					if(getResult("%Area",i) >= areapercent ) {
						mscountv++;
						prePOIcount =prePOIcount + getResult("%Area",i);
					}
					v++;
				}

				totalprePOIcount = totalprePOIcount/v;
				prePOIcount = prePOIcount/mscountv;

				roiManager("reset");
				if(POIcount> 0 ) {
	 	 			roiManager("Open", resultdir+folderlist[f]+name+"_"+third+"_ROI.zip");
				}
				selectImage(marker+" mask");
				run("Clear Results");
				roiManager("Measure");
				mscountv=0;
				v = 0;
				for(i=0;i<roiManager("Count");i++) {
					totalpostPOIcount = totalpostPOIcount + getResult("%Area",i);
					if(getResult("%Area",i) >= areapercent ) {
						mscountv++;
						postPOIcount = postPOIcount + getResult("%Area",i);
					}
					v++;
				}
				totalpostPOIcount = totalpostPOIcount/v;
				postPOIcount = postPOIcount/mscountv;

				//placeholder to un-comment if need be

				//roiManager("reset");
				//if(POIcount> 0 ) {
	 	 		//roiManager("Open", resultdir+folderlist[f]+name+"_"+marker+"_ROI.zip");
				//}
				//selectImage(marker+" mask");
				//run("Clear Results");
				//roiManager("Measure");
				//mscountv=0;
				//v = 0;
				//for(i=0;i<roiManager("Count");i++) {
				//	totalPOIPOIcount = totalPOIPOIcount + getResult("%Area",i);
				//	if(getResult("%Area",i) >= areapercent ) {
				//		mscountv++;
				//		POIPOIcount = POIPOIcount + getResult("%Area",i);
				//	}
				//	v++;
				//}
				//totalPOIPOIcount = totalPOIPOIcount/v;
				//POIPOIcount = POIPOIcount/mscountv;
			}	
			
			//channel-unmask is the direct image, without a mask
	
			selectImage(second+"-unmask");
			run("Clear Results");
			roiManager("Measure");
			for(i=0;i<roiManager("Count");i++) {
				//this str just stores the values from the ROI measure function to be put into the appropriate array for the green ROI
				str = filelist[d]+"	"+i+1+"	"+getResult("Area",i)+"		"+getResult("%Area",i)+"	"+ getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i);
				if(r==0){
					prepostArray = Array.concat(prepostArray,str);
				}
				if(r==1){
					postpreArray = Array.concat(postpreArray,str);
				}
				if(r==2){
					prePOIArray = Array.concat(prePOIArray,str);
				}
			}
			selectImage(marker+"-unmask");
			run("Clear Results");
			roiManager("Measure");
			for(i=0;i<roiManager("Count");i++) {
				str = "		"+getResult("%Area",i)+"	"+ getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i)+"\n";
				if(r==0){
					prepreArray = Array.concat(prepreArray,str);
				}
				if(r==1){
					postpostArray = Array.concat(postpostArray,str);
				}
				if(r==2){
					POIPOIArray = Array.concat(POIPOIArray,d2s(getResult("Area",i),4)+"		"+str);
				}
			}
			if(r==2)	{
				selectImage(third+"-unmask");
				run("Clear Results");
				roiManager("Measure");
				for(i=0;i<roiManager("Count");i++) {
					str =  "		"+getResult("%Area",i)+"	"+ getResult("Mean",i)+"	"+getResult("IntDen",i)+"	"+getResult("RawIntDen",i);
					postPOIArray = Array.concat(postPOIArray,d2s(getResult("Area",i),4)+"		"+str);
				
				}
				//find the pre/post ROI that are associated w/ pre/post puncta and use those over the POI image
			}

			Array.show(postPOIArray);
			
			
			if(r==2)	{
				xPOI = x;
				vPOI = v;
				countArray = 0;
				roiManager("reset"); 
				roiManager("Open", resultdir+folderlist[f]+name+"_"+second+"_ROI.zip");
				selectImage(third+"-unmask");
				run("Clear Results");
				roiManager("Measure");
				//For the "triple coloc" have the GR, GG, RG, RR associated with the third channel - in this case 
				//roiManager("Select", 0);
				for(i=0;i<roiManager("Count");i++) {
					if(getResult("%Area",i)>25)	{
						countArray = Array.concat(countArray,i);
					}
				}
				run("Clear Results");
				selectImage(marker+"-unmask");
				for(j=0;j<countArray.length;j++)	{
					roiManager("Select", countArray[j]);
					roiManager("Measure");
					str = filelist[d]+"	"+j+1+"	"+getResult("Area",j)+"		"+getResult("%Area",j)+"	"+ getResult("Mean",j)+"	"+getResult("IntDen",j)+"	"+getResult("RawIntDen",j);
				}
				prepostPOIArray = Array.concat(prepostPOIArray,str);
				
				countArray = 0;
				roiManager("reset"); 
				roiManager("Open", resultdir+folderlist[f]+name+"_"+third+"_ROI.zip");
				selectImage(second+"-unmask");
				run("Clear Results");
				roiManager("Measure");
				//For the "triple coloc" have the GR, GG, RG, RR associated with the third channel - in this case 
				//roiManager("Select", 0);
				for(i=0;i<roiManager("Count");i++) {
					if(getResult("%Area",i)>25)	{
						countArray = Array.concat(countArray,i);
					}
				}
				run("Clear Results");
				selectImage(marker+"-unmask");
				for(j=0;j<countArray.length;j++)	{
					roiManager("Select", countArray[j]);
					roiManager("Measure");
					str = "		"+getResult("%Area",j)+"	"+ getResult("Mean",j)+"	"+getResult("IntDen",j)+"	"+getResult("RawIntDen",j)+"\n";
				}
				postprePOIArray = Array.concat(postprePOIArray,str);
			}
			
			
			roiManager("reset"); 
			run("Clear Results");
			//prints this + variable strings produced from the other functions to the log to be saved
		}
		run("Close All"); 
		print(name+"	"+precount+"	"+postcount+"	"+POIcount+"	"+prepostcount+"	"+postprecount+"	"+"dendritelength	"+precount+"/length	"+postcount+"/length	"+postprecount+"/length	"+prepostcount+"/length		"+prepostcount+"	"+totalprepostcount+"	"+xpre+"	"+postprecount+"	"+totalpostprecount+"	"+xpost);
		//resultdir+folderlist[f] is the name of the condition
		temptitle = File.getName(resultdir+folderlist[f]);
	}

//This takes the arrays and puts them into the string - they were arrays
//because the method in which the ROI quant is collected only permits one measurement at a time
//and swapping back and forth between images and measuring the image individually between
//each single puncta seems less straightforward than just making it an array

UMcountprepostprepre = UMcountprepostprepre +"				"+ pre+"ROI/"+post+"Img					"+ pre+"ROI/"+ pre+"Img\n";
for(k=0;k<prepostArray.length;k++)	{
	UMcountprepostprepre = UMcountprepostprepre + prepostArray[k] +prepreArray[k];
}

UMcountpostprepostpost = UMcountpostprepostpost+"				"+ post+"ROI/"+pre+"Img					"+ post+"ROI/"+ post+"Img\n";
for(k=0;k<postpreArray.length;k++)	{
	UMcountpostprepostpost = UMcountpostprepostpost + postpreArray[k] +postpostArray[k];
}

UMcountprePOIpostPOIPOIPOI = UMcountprePOIpostPOIPOIPOI+"				"+ pre+"ROI/"+POI+"Img					"+post+"ROI/"+POI+"Img					"+POI+"ROI/"+POI+"Img"+" \n";
for(k=0;k<prePOIArray.length;k++)	{
	UMcountprePOIpostPOIPOIPOI = UMcountprePOIpostPOIPOIPOI + prePOIArray[k] +postPOIArray[k]+ POIPOIArray[k];
}

UMcounttriple = UMcounttriple+"				"+ pre+post+"ROI/"+POI+"Img					"+pre+post+"ROI/"+POI+"Img\n";
for(k=0;k<prepostPOIArray.length;k++)	{
	UMcounttriple = UMcounttriple + prepostPOIArray[k] +postprePOIArray[k];
}


//these take the strings and the log and save them as tab separated excel sheets
selectWindow("Log");
saveAs("Text", resultdir+"Summary.xls");
selectWindow("Log"); 
run("Close");
selectWindow("Results"); 
run("Close");
selectWindow("ROI Manager"); 
run("Close");
File.saveString(UMcountprepostprepre,resultdir+"rawPrePostintensity.xls");
File.saveString(UMcountpostprepostpost,resultdir+"rawPostPreintensity.xls");
File.saveString(UMcountprePOIpostPOIPOIPOI,resultdir+"rawprepostPOIintensity.xls");
File.saveString(UMcounttriple,resultdir+"rawPOItripleintensity.xls");

//the following functions are listed in order of use in the macro

//thresholding parameters are generally the only ones that need changing, but all can be modified
function parameterinput()
	{
	Dialog.create("Parameter");
		Dialog.addNumber("Green Threshold:", 30);
		Dialog.addNumber("Red Threshold:", 30);
		Dialog.addNumber("Blue Threshold", 30);
		Dialog.addNumber("Area Percent (%):", 25);
		Dialog.addNumber("Pixel Scale (um/pixel):", 0.1705);
		Dialog.addNumber("Min Puncta Size (pixel):", 1);
		Dialog.addNumber("Max Puncta Size (pixel):", 60);
		Dialog.addChoice("presynaptic nchannel",colors,colors[0]);
		Dialog.addChoice("postsynaptic channel",colors,colors[1]);
		Dialog.addChoice("associated protein of interest",colors,colors[2]);
	Dialog.show();
	greenThreshold = Dialog.getNumber();
	redThreshold = Dialog.getNumber();
	blueThreshold = Dialog.getNumber();
	areapercent = Dialog.getNumber();  
	scale = Dialog.getNumber();  
	minsize = Dialog.getNumber();  
	maxsize = Dialog.getNumber(); 
	pre = Dialog.getChoice();
	post = Dialog.getChoice();
	POI = Dialog.getChoice();
	}
	
//this function opens the appropriate image from the appropriate folder in the raw data folder
//gets the name, standardizes the properties of the image, splits the channels and discards the blue channel 
//as "axon" to be saved elsewhere

function initialize()
 {
	open(rawdir+foldername+File.separator+rawlist[d]);
	name=getInfo("image.filename");
	run("Properties...", "channels=1 slices=1 frames=1 unit=um pixel_width="+scale+" pixel_height=0.1705 voxel_depth=1");
	run("Split Channels");

	selectImage(name+" (blue)"); 
	rename("Blue");
	run("Duplicate...", " ");
	selectImage("Blue-1"); 
	rename("Blue-unmask");

	selectImage(name+" (green)"); 
	rename("Green");
	run("Duplicate...", " ");
	selectImage("Green-1"); 
	rename("Green-unmask");

	selectImage(name+" (red)"); 
	rename("Red");
	run("Duplicate...", " ");
	selectImage("Red-1"); 
	rename("Red-unmask");
 }

//this function creates a mask for the selected color channel (green or red). 
//it takes the threshold indicated in the parameter input, uses it to point out the maxima 
//and then runs "analyze particles" within the specified puncta size, saves the number of puncta as a string, saves the ROI, 
//and saves the mask

function mask(channel)
	{
	selectImage(channel);
	run("Gaussian Blur...", "sigma=1");
	if( channel == "Green") {
		setThreshold(greenThreshold, 255);
		}
	if( channel == "Red") {
		setThreshold(redThreshold, 255);
		}
	if( channel == "Blue") {
		setThreshold(blueThreshold, 255);
		}
	run("Find Maxima...", "noise=10 output=[Segmented Particles] above");
	run("Analyze Particles...", "size="+minsize+"-"+maxsize+" pixel show=Masks add");
	selectWindow("Mask of "+channel+" Segmented");  
	run("Grays");
	saveAs("Tiff", resultdir+folderlist[f]+name+"_"+channel+"_mask.tif");
	run("Clear Results");
	roiManager("Measure");
	selectWindow("Results");

	run("Clear Results");
	rename(channel+" mask");
	selectImage(channel); 
	close();
	selectImage(channel+" Segmented"); 
	close();

	//gets the # of puncta counted in each condition
	if( channel == pre )  {
		precount = roiManager("Count");
		}
	if( channel == post )  {
		postcount = roiManager("Count");
		}
	if( channel == POI )  {
		POIcount = roiManager("Count");
		}
  
	if( roiManager("Count") > 0 )
		{
		roiManager("Save",resultdir+folderlist[f]+name+"_"+channel+"_ROI.zip");
		}
	roiManager("reset");
	}

//this function increases the contrast for the blue channel (marking dendrites even though it says axons)
//and measures the length of the segment (even though this is usually also done manually as a precaution)
